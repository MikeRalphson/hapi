<?xml version="1.0" encoding="ASCII"?>
<swagger:Api xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:swagger="http://swagger.io/core" swagger="2.0" host="petstore.swagger.io" basePath="/v2">
  <info title="Swagger Petstore" description="This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters." version="1.0.0">
    <contact email="apiteam@swagger.io"/>
    <license name="Apache 2.0" url="http://www.apache.org/licenses/LICENSE-2.0.html"/>
  </info>
  <schemes>http</schemes>
  <paths pattern="/pet">
    <put summary="Update an existing pet" description="" operationId="updatePet">
      <tags>pet</tags>
      <consumes>application/json</consumes>
      <consumes>application/xml</consumes>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="body" in="body" description="Pet object that needs to be added to the store" required="true">
        <schema ref="#/definitions/Pet"/>
      </parameters>
      <responses code="400"/>
      <responses code="404"/>
      <responses code="405"/>
    </put>
    <post summary="Add a new pet to the store" description="" operationId="addPet">
      <tags>pet</tags>
      <consumes>application/json</consumes>
      <consumes>application/xml</consumes>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="body" in="body" description="Pet object that needs to be added to the store" required="true">
        <schema ref="#/definitions/Pet"/>
      </parameters>
      <responses code="405"/>
    </post>
  </paths>
  <paths pattern="/pet/findByStatus">
    <get summary="Finds Pets by status" description="Multiple status values can be provided with comma separated strings" operationId="findPetsByStatus">
      <tags>pet</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="status" description="Status values that need to be considered for filter" required="true"/>
      <responses code="200"/>
      <responses code="400"/>
    </get>
  </paths>
  <paths pattern="/pet/findByTags">
    <get summary="Finds Pets by tags" description="Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing." operationId="findPetsByTags" deprecated="true">
      <tags>pet</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="tags" description="Tags to filter by" required="true"/>
      <responses code="200"/>
      <responses code="400"/>
    </get>
  </paths>
  <paths pattern="/pet/{petId}">
    <get summary="Find pet by ID" description="Returns a single pet" operationId="getPetById">
      <tags>pet</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="petId" in="path" description="ID of pet to return" required="true" format="int64"/>
      <responses code="200"/>
      <responses code="400"/>
      <responses code="404"/>
      <security/>
    </get>
    <delete summary="Deletes a pet" description="" operationId="deletePet">
      <tags>pet</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="api_key" in="header" type="string"/>
      <parameters name="petId" in="path" description="Pet id to delete" required="true" format="int64"/>
      <responses code="400"/>
      <responses code="404"/>
    </delete>
    <post summary="Updates a pet in the store with form data" description="" operationId="updatePetWithForm">
      <tags>pet</tags>
      <consumes>application/x-www-form-urlencoded</consumes>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="petId" in="path" description="ID of pet that needs to be updated" required="true" format="int64"/>
      <parameters name="name" in="formData" description="Updated name of the pet" type="string"/>
      <parameters name="status" in="formData" description="Updated status of the pet" type="string"/>
      <responses code="405"/>
    </post>
  </paths>
  <paths pattern="/pet/{petId}/uploadImage">
    <post summary="uploads an image" description="" operationId="uploadFile">
      <tags>pet</tags>
      <consumes>multipart/form-data</consumes>
      <produces>application/json</produces>
      <parameters name="petId" in="path" description="ID of pet to update" required="true" format="int64"/>
      <parameters name="additionalMetadata" in="formData" description="Additional data to pass to server" type="string"/>
      <parameters name="file" in="formData" description="file to upload" type="file"/>
      <responses code="200"/>
    </post>
  </paths>
  <paths pattern="/store/inventory">
    <get summary="Returns pet inventories by status" description="Returns a map of status codes to quantities" operationId="getInventory">
      <tags>store</tags>
      <produces>application/json</produces>
      <responses code="200"/>
      <security/>
    </get>
  </paths>
  <paths pattern="/store/order">
    <post summary="Place an order for a pet" description="" operationId="placeOrder">
      <tags>store</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="body" in="body" description="order placed for purchasing the pet" required="true">
        <schema ref="#/definitions/Order"/>
      </parameters>
      <responses code="200"/>
      <responses code="400"/>
    </post>
  </paths>
  <paths pattern="/store/order/{orderId}">
    <get summary="Find purchase order by ID" description="For valid response try integer IDs with value >= 1 and &lt;= 10. Other values will generated exceptions" operationId="getOrderById">
      <tags>store</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="orderId" in="path" description="ID of pet that needs to be fetched" required="true" format="int64"/>
      <responses code="200"/>
      <responses code="400"/>
      <responses code="404"/>
    </get>
    <delete summary="Delete purchase order by ID" description="For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors" operationId="deleteOrder">
      <tags>store</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="orderId" in="path" description="ID of the order that needs to be deleted" required="true" format="int64"/>
      <responses code="400"/>
      <responses code="404"/>
    </delete>
  </paths>
  <paths pattern="/user">
    <post summary="Create user" description="This can only be done by the logged in user." operationId="createUser">
      <tags>user</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="body" in="body" description="Created user object" required="true">
        <schema ref="#/definitions/User"/>
      </parameters>
      <responses code="default"/>
    </post>
  </paths>
  <paths pattern="/user/createWithArray">
    <post summary="Creates list of users with given input array" description="" operationId="createUsersWithArrayInput">
      <tags>user</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="body" in="body" description="List of user object" required="true">
        <schema/>
      </parameters>
      <responses code="default"/>
    </post>
  </paths>
  <paths pattern="/user/createWithList">
    <post summary="Creates list of users with given input array" description="" operationId="createUsersWithListInput">
      <tags>user</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="body" in="body" description="List of user object" required="true">
        <schema/>
      </parameters>
      <responses code="default"/>
    </post>
  </paths>
  <paths pattern="/user/login">
    <get summary="Logs user into the system" description="" operationId="loginUser">
      <tags>user</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="username" description="The user name for login" required="true" type="string"/>
      <parameters name="password" description="The password for login in clear text" required="true" type="string"/>
      <responses code="200"/>
      <responses code="400"/>
    </get>
  </paths>
  <paths pattern="/user/logout">
    <get summary="Logs out current logged in user session" description="" operationId="logoutUser">
      <tags>user</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <responses code="default"/>
    </get>
  </paths>
  <paths pattern="/user/{username}">
    <put summary="Updated user" description="This can only be done by the logged in user." operationId="updateUser">
      <tags>user</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="username" in="path" description="name that need to be updated" required="true" type="string"/>
      <parameters name="body" in="body" description="Updated user object" required="true">
        <schema ref="#/definitions/User"/>
      </parameters>
      <responses code="400"/>
      <responses code="404"/>
    </put>
    <get summary="Get user by user name" description="" operationId="getUserByName">
      <tags>user</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="username" in="path" description="The name that needs to be fetched. Use user1 for testing. " required="true" type="string"/>
      <responses code="200"/>
      <responses code="400"/>
      <responses code="404"/>
    </get>
    <delete summary="Delete user" description="This can only be done by the logged in user." operationId="deleteUser">
      <tags>user</tags>
      <produces>application/xml</produces>
      <produces>application/json</produces>
      <parameters name="username" in="path" description="The name that needs to be deleted" required="true" type="string"/>
      <responses code="400"/>
      <responses code="404"/>
    </delete>
  </paths>
  <definitions type="object" name="Order">
    <properties format="int64" name="id"/>
    <properties format="int64" name="petId"/>
    <properties format="int32" name="quantity"/>
    <properties format="date-time" type="string" name="shipDate"/>
    <properties description="Order Status" type="string" name="status">
      <enum>placed</enum>
      <enum>approved</enum>
      <enum>delivered</enum>
    </properties>
    <properties description="false" type="boolean" default="false" name="complete"/>
  </definitions>
  <definitions type="object" name="User">
    <properties format="int64" name="id"/>
    <properties type="string" name="username"/>
    <properties type="string" name="firstName"/>
    <properties type="string" name="lastName"/>
    <properties type="string" name="email"/>
    <properties type="string" name="password"/>
    <properties type="string" name="phone"/>
    <properties format="int32" description="User Status" name="userStatus"/>
  </definitions>
  <definitions type="object" name="Category">
    <properties format="int64" name="id"/>
    <properties type="string" name="name"/>
  </definitions>
  <definitions type="object" name="Tag">
    <properties format="int64" name="id"/>
    <properties type="string" name="name"/>
  </definitions>
  <definitions type="object" name="ApiResponse">
    <properties format="int32" name="code"/>
    <properties type="string" name="type"/>
    <properties type="string" name="message"/>
  </definitions>
  <definitions type="object" name="Pet">
    <required>name</required>
    <required>photoUrls</required>
    <properties format="int64" name="id"/>
    <properties ref="#/definitions/Category" name="category"/>
    <properties type="string" name="name"/>
    <properties name="photoUrls"/>
    <properties name="tags"/>
    <properties description="pet status in the store" type="string" name="status">
      <enum>available</enum>
      <enum>pending</enum>
      <enum>sold</enum>
    </properties>
  </definitions>
  <securityDefinitions type="apiKey" name="api_key" in="header" globalName="api_key"/>
  <externaldocs description="Find out more about Swagger" url="http://swagger.io"/>
  <tag name="pet" description="Everything about your Pets">
    <externalDocs description="Find out more" url="http://swagger.io"/>
  </tag>
  <tag name="store" description="Access to Petstore orders"/>
  <tag name="user" description="Operations about user">
    <externalDocs description="Find out more about our store" url="http://swagger.io"/>
  </tag>
</swagger:Api>
